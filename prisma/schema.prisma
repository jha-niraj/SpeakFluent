generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    ADMIN
}

enum TransactionType {
    PURCHASE
    USAGE
    REFUND
}

enum TransactionStatus {
    PENDING
    COMPLETED
    FAILED
    CANCELLED
}

enum ConversationStatus {
    ACTIVE
    COMPLETED
    CANCELLED
    INTERRUPTED
}

enum GoalType {
    PRESET
    CUSTOM
}

enum ModuleType {
    SCRIPT_WRITING
    PHONETICS_PRONUNCIATION
    VOCABULARY_BUILDING
    GRAMMAR_FUNDAMENTALS
    CULTURAL_CONTEXT
}

enum ModuleStatus {
    LOCKED
    AVAILABLE
    IN_PROGRESS
    COMPLETED
}

enum QuizType {
    MULTIPLE_CHOICE
    FILL_IN_BLANK
    PRONUNCIATION
    MATCHING
    WRITING_PRACTICE
}

enum FeatureAccessLevel {
    FOUNDATION_REQUIRED
    INTERMEDIATE_REQUIRED
    ADVANCED_ACCESS
    FULL_ACCESS
}

enum SelectedLevel {
    BEGINNER
    INTERMEDIATE
    ADVANCED
}

model User {
    id                   String    @id @default(cuid())
    email                String    @unique
    emailVerified        DateTime?
    password             String?
    name                 String
    image                String    @default("https://res.cloudinary.com/dhfuckcax/image/upload/v1739810646/krk8x7fzjukcfcoefrea.jpg")
    role                 Role      @default(USER)
    roleExplicitlyChosen Boolean   @default(false)
    credits              Int       @default(0)
    createdAt            DateTime  @default(now())

    // Onboarding preferences
    onboardingCompleted Boolean @default(false)
    selectedLanguage    String?
    selectedLevel       SelectedLevel?  @default(BEGINNER)
    selectedGoal        String?
    selectedTime        String?
    dailyMinutes        Int?

    // Password reset
    resetToken       String?   @unique
    resetTokenExpiry DateTime?

    accounts             Account[]
    creditTransactions   CreditTransaction[]
    conversationSessions ConversationSession[]
    weeklyGoals          WeeklyGoal[]
    moduleProgress       ModuleProgress[]
    quizAttempts         QuizAttempt[]
    userStats            UserStats?

    @@index([email])
}

model CreditTransaction {
    id            String            @id @default(cuid())
    userId        String
    type          TransactionType
    status        TransactionStatus @default(PENDING)
    amount        Int
    price         Float?
    currency      String?           @default("USD")
    description   String?
    paymentMethod String?
    paymentId     String?
    metadata      Json?
    createdAt     DateTime          @default(now())
    updatedAt     DateTime          @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([type])
    @@index([status])
}

model Account {
    id                String  @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model ConversationSession {
    id          String             @id @default(cuid())
    userId      String
    agentId     String
    sessionId   String?
    status      ConversationStatus @default(ACTIVE)
    language    String             @default("english")
    topic       String?
    duration    Int?
    creditsUsed Int                @default(10)
    quality     Float?
    feedback    String?
    createdAt   DateTime           @default(now())
    updatedAt   DateTime           @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([status])
}

model WeeklyGoal {
    id          String    @id @default(cuid())
    userId      String
    title       String
    description String?
    type        GoalType  @default(CUSTOM)
    category    String
    completed   Boolean   @default(false)
    completedAt DateTime?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([type])
    @@index([category])
}

model FoundationModule {
    id           String     @id @default(cuid())
    moduleType   ModuleType
    language     String
    title        String
    description  String
    content      Json
    orderIndex   Int
    requiredScore Int @default(75)
    creditsReward Int @default(50)
    isActive     Boolean    @default(true)
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt

    moduleProgress ModuleProgress[]
    quizAttempts   QuizAttempt[]

    @@unique([moduleType, language])
    @@index([language])
    @@index([orderIndex])
}

model ModuleProgress {
    id               String       @id @default(cuid())
    userId           String
    moduleId         String
    language         String
    status           ModuleStatus @default(LOCKED)
    progressPercent  Int          @default(0)
    currentSection   String?
    timeSpent        Int          @default(0)
    bestScore        Int?
    completedAt      DateTime?
    lastAccessedAt   DateTime?
    createdAt        DateTime     @default(now())
    updatedAt        DateTime     @updatedAt

    user   User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    module FoundationModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)

    @@unique([userId, moduleId])
    @@index([userId])
    @@index([language])
    @@index([status])
}

model QuizAttempt {
    id          String   @id @default(cuid())
    userId      String
    moduleId    String
    language    String
    quizType    QuizType
    score       Int
    totalQuestions Int
    correctAnswers Int
    timeSpent   Int
    answers     Json
    passed      Boolean  @default(false)
    createdAt   DateTime @default(now())

    user   User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    module FoundationModule @relation(fields: [moduleId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([moduleId])
    @@index([language])
    @@index([passed])
}

model UserFeatureAccess {
    id          String             @id @default(cuid())
    userId      String
    language    String
    featureName String
    accessLevel FeatureAccessLevel
    unlockedAt  DateTime?
    createdAt   DateTime           @default(now())
    updatedAt   DateTime           @updatedAt

    @@unique([userId, language, featureName])
    @@index([userId])
    @@index([language])
}

model UserStats {
    id               String   @id @default(cuid())
    userId           String   @unique
    totalSpeakingTime Int     @default(0)
    weeklyTalkingTime Int     @default(0)
    totalConversations Int    @default(0)
    weeklyConversations Int   @default(0)
    currentStreak    Int      @default(0)
    longestStreak    Int      @default(0)
    lastActivityDate DateTime?
    weekStartDate    DateTime @default(now())
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}